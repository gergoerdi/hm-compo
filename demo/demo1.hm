data List a = Nil | Cons a (List a)

map = \f -> \xs -> case xs of
  Nil -> Nil
  Cons x xs -> Cons (f x) (map f xs)

foldr = \f -> \y -> \xs -> case xs of
  Nil -> y
  Cons x xs -> f x (foldr f y xs)

id = \x -> x
const = \x -> \y -> x
flip = \f -> \y -> \x -> f x y

fix = \f -> let x = f x in x

undefined = let x = x in x
undefined1 = fix id
undefined2 = undefined2
